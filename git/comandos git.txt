/*COMANDOS DE GIT CURSO PROFESIONAL*/

cd 	-> allows navigation between directories
cd / 	-> redirects directly to the HOME directory
ls 	-> list the files
ls -al 	-> list all files including hidden ones.
clear 	-> Console clean
ctrl +l -> Console clean
cd .. 	-> return one directory
mkdir 	-> make a folder
touch 	-> make a empty file
cat 	-> show us file content
history -> shows the history of written commands
rm 	-> delete files

--GIT--
git status -> show project status, show commits, current branch, tracked files
git add    -> add the changes and add them to staged
git rm     -> elimina el archivo del directorio
git rm --cached -> almacena los cambios en memoria RAM, aun no estan en la BD.
git commit -m "msj" -> permite enviar los cambios al repositorio junto con un msj para identificar el cambio.
git config -> muestra la lista de configuraciones de git
git config --list   -> se muestran las configuraciones por defecto
git config --global user.name "Miguel" -> Cambia el usuario de git
git config --global user.email "correo@gmail.com" -> Cambia el usuario de git
code archivo.txt -> abre el archivo en VS Code
git log    -> muestra el historial del repositorio
git show -> muestra los cambios que han ocurrido en el archivo
git diff -> permite hacer una comparacion entre dos versiones de los cambios que han ocurrido en el archivo
git checkout 	-> permite traer cambios de ramas anteriores dependiendo como se configure el comando checkout.
git reset-> permite regresar el proyecto a una version anterior
git reset rama --hard -> forza a regresar rodo el proyecto a una version anterior
git reset rama --soft -> cambia el proyecto actual a la rama anterior, pero lo guardado en stage se mantiene
git push -> manda los cambios al servidor donde se encuentra el proyecto
git fetch -> trae el escritorio remoto al local
git merge -> hace una combinacion de las ultimas versionas de dos ramas
git pull  -> copia el repositorio local y la bd de cambios
git checkout rama -> hace un switch a una rama diferente
git checkout -b Nombrerama -> crea una nueva rama y se mueve a la nueva rama.
git branch -> muestra las ramas existentes
git remote add origin "link" -> se encarga de sincronizar nuestro repositorio a un repositorio de github.
git init 	-> crea la configuracion inicial de nuestro repositorio.
ssh-keygen -t rsa -b 4096 -C "youremail@example.com" -> permite crear una llave SSH publica / privada
eval $(ssh-agent - s) -> comprueba el procesp
ssh-add ~/.ssh/id_rsa -> agrega el proceso
git remote set-url origin "link del repo" -> permite hacer un reemplazo del link del repositorio actual por uno nuevo
git log --all --graph -> muestra como funcionan las ramas de una manera un poco mas grafica
git log --all --graph --decorate --oneline -> muestra lo mismo pero de una forma mas comprimida 

git tag -a v0.1 -m "mensaje" hash -> permite asignar una etiqueta al hash del commit realizado

git push origin :refs/tags/nombreTag -> elimina el tag creado en github


un fork es hacer una copia del estado actual del proyecto y se clona.

https://santia0098.github.io/

git rebase rama -> reescribe la historia del repositorio uniendo dos ramas diferentes

git stash -> permite guardar cambios del trabajo actual en el staging

git stash list -> muestra el lugar temporal donde se guardaron los cambios

git stash pop -> regresa a los cambios realizados

git stash branch "nombre-rama" -> guarda en una rama los cambios almacenados en el stash

git stash drop -> borra el cambio almacenado en stash

git clean --dry-run -> simula los archivos que seran borrados del proyecto que son untracked

git clean -f -> borra los files untracked


git cherry-pick "hash" -> trae un commit de otra rama a la master

git commit --amend -> une dos commits para subir cmbios en uno solo

git reflog -> muestra todo el historial de como se encontraba el proyecto antes de borrar algo

git reset --soft / --hard "HASH" -> va a resetear el proyecto al head donde todo estaba correcto

git grep color -> busca en los archivos donde se ha usado la palabra color

git grep -n color -> muestra lo mismo que el comando anterior, pero junto con la linea donde se encontro la coincidencia

git grep -c color -> cuenta cuantas veces aparece la palabra color en los archivos.

grep -> busca en los archivos

log -> busca en los commits 

git shortlog -> muestra cuantos commits ha hecho los miembros del equipo y muestra un log

git shortlog -sn -> muestra las personas que han hecho ciertos commits

git shortlog -sn --all -> muestra el numero de commits realizados, incluso los eliminados

git shortlog -sn --all --no-merges -> muestra los commits pero sin mostrar los merges.

git blame "NombreArchivo" -> muestra quien ha realizado cambios en un documento especifico linea por linea

git blame -c "NombreArchivo" -> muestra un poco mejor identado el resultado 

git blame --help -> abre el manual de funcionamiento del comando

git blame "NombreArchivo" -L35,53 -> muestra de forma especifica quien cambio el archivo n ese rando de lineas

git branch -r -> muestra las ramas remotas

git branch -a -> muestra las ramas locales y remotas

---------
